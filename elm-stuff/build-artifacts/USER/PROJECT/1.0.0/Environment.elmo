Elm.Environment = Elm.Environment || {};
Elm.Environment.make = function (_elm) {
   "use strict";
   _elm.Environment = _elm.Environment || {};
   if (_elm.Environment.values)
   return _elm.Environment.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Environment",
   $Basics = Elm.Basics.make(_elm),
   $Cell = Elm.Cell.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var update = F2(function (action,
   model) {
      return function () {
         switch (action.ctor)
         {case "Click":
            return function () {
                 var updateCell = function (cellModel) {
                    return _U.eq(cellModel.id,
                    action._0) ? A2($Cell.update,
                    action._1,
                    cellModel) : cellModel;
                 };
                 return A2($List.map,
                 updateCell,
                 model);
              }();
            case "Tick": return model;}
         _U.badCase($moduleName,
         "between lines 25 and 34");
      }();
   });
   var Tick = {ctor: "Tick"};
   var Click = F2(function (a,b) {
      return {ctor: "Click"
             ,_0: a
             ,_1: b};
   });
   var viewCell = F2(function (address,
   model) {
      return A2($Cell.view,
      A2($Signal.forwardTo,
      address,
      Click(model.id)),
      model);
   });
   var view = F2(function (address,
   model) {
      return function () {
         var rowStyle = $Html$Attributes.style(_L.fromArray([{ctor: "_Tuple2"
                                                             ,_0: "width"
                                                             ,_1: "220px"}]));
         return A2($Html.div,
         _L.fromArray([rowStyle]),
         A2($List.map,
         viewCell(address),
         model));
      }();
   });
   var size = 10;
   var init = A2($List.map,
   $Cell.init,
   _L.range(1,size * size));
   _elm.Environment.values = {_op: _op
                             ,init: init
                             ,update: update
                             ,view: view};
   return _elm.Environment.values;
};